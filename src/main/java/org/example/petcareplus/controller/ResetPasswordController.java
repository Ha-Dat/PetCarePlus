package org.example.petcareplus.controller;

import jakarta.validation.Valid;
import org.example.petcareplus.dto.ResetPasswordDTO;
import org.example.petcareplus.entity.Account;
import org.example.petcareplus.repository.AccountRepository;
import org.example.petcareplus.service.ResetPasswordService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * Controller cho ch·ª©c nƒÉng Reset Password (Qu√™n m·∫≠t kh·∫©u)
 */
@RestController
@RequestMapping("/api/reset-password")
public class ResetPasswordController {

    private static final Logger log = LoggerFactory.getLogger(ResetPasswordController.class);

    @Autowired
    private ResetPasswordService resetPasswordService;

    @Autowired
    private AccountRepository accountRepository;

    /**
     * Validate th√¥ng tin ƒë·ªÉ reset password (kh√¥ng c·∫ßn OTP)
     */
    @PostMapping("/validate-info")
    public ResponseEntity<?> validateResetPasswordInfo(@RequestParam String username, @RequestParam String phoneNumber) {
        try {
            log.info("üîç Request to validate reset password info - Username: {}, Phone: {}", username, phoneNumber);

            // Validate input
            if (username == null || username.trim().isEmpty()) {
                return createErrorResponse("T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng", 400);
            }
            if (phoneNumber == null || phoneNumber.trim().isEmpty()) {
                return createErrorResponse("S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng", 400);
            }

            // Validate th√¥ng tin
            boolean isValid = resetPasswordService.validateUserCredentials(username, phoneNumber);

            if (isValid) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", true);
                response.put("message", "Th√¥ng tin h·ª£p l·ªá, c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u");
                response.put("username", username);
                response.put("phoneNumber", phoneNumber);

                log.info("‚úÖ Reset password info validation successful for: {}", username);
                return ResponseEntity.ok(response);
            } else {
                log.warn("‚ùå Invalid reset password info for: {}", username);
                return createErrorResponse("H·ªç t√™n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i kh√¥ng kh·ªõp v·ªõi th√¥ng tin ƒëƒÉng k√Ω. Vui l√≤ng ki·ªÉm tra l·∫°i.", 400);
            }

        } catch (Exception e) {
            log.error("‚ùå Error validating reset password info: {}", e.getMessage());
            return createErrorResponse("L·ªói h·ªá th·ªëng: " + e.getMessage(), 500);
        }
    }

    /**
     * Verify OTP reset password (kh√¥ng c·∫ßn thi·∫øt n·ªØa)
     */
    @PostMapping("/verify-otp")
    public ResponseEntity<?> verifyResetPasswordOtp(@RequestParam String phoneNumber, @RequestParam String otp) {
        // Lu√¥n return success v√¨ kh√¥ng c·∫ßn OTP
        log.info("üîç OTP verification skipped for phone: {} (no OTP required)", phoneNumber);
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", true);
        response.put("message", "OTP verification skipped (no OTP required)");
        response.put("phoneNumber", phoneNumber);

        return ResponseEntity.ok(response);
    }

    /**
     * Reset password
     */
    @PostMapping("/reset")
    public ResponseEntity<?> resetPassword(@Valid @RequestBody ResetPasswordDTO resetPasswordDTO, 
                                         BindingResult bindingResult) {
        try {
            log.info("üîÑ Request to reset password for user: {}", resetPasswordDTO.getUsername());

            // Validate input
            if (bindingResult.hasErrors()) {
                String errorMessage = bindingResult.getFieldErrors().stream()
                    .map(error -> error.getField() + ": " + error.getDefaultMessage())
                    .findFirst()
                    .orElse("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
                
                log.warn("‚ùå Validation errors for reset password: {}", errorMessage);
                return createErrorResponse(errorMessage, 400);
            }

            // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n c√≥ kh·ªõp nhau kh√¥ng
            if (!resetPasswordDTO.isPasswordMatch()) {
                log.warn("‚ùå Password confirmation does not match for user: {}", resetPasswordDTO.getUsername());
                return createErrorResponse("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp", 400);
            }

            // Reset password
            boolean success = resetPasswordService.resetPassword(resetPasswordDTO);

            if (success) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", true);
                response.put("message", "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng");
                response.put("username", resetPasswordDTO.getUsername());

                log.info("‚úÖ Password reset successful for user: {}", resetPasswordDTO.getUsername());
                return ResponseEntity.ok(response);
            } else {
                log.warn("‚ùå Password reset failed for user: {}", resetPasswordDTO.getUsername());
                return createErrorResponse("Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng ki·ªÉm tra th√¥ng tin", 400);
            }

        } catch (Exception e) {
            log.error("‚ùå Error resetting password for user {}: {}", 
                resetPasswordDTO.getUsername(), e.getMessage());
            return createErrorResponse("L·ªói h·ªá th·ªëng: " + e.getMessage(), 500);
        }
    }

    /**
     * Validate th√¥ng tin reset password (kh√¥ng th·ª±c hi·ªán reset)
     */
    @PostMapping("/validate")
    public ResponseEntity<?> validateResetPassword(@Valid @RequestBody ResetPasswordDTO resetPasswordDTO,
                                                 BindingResult bindingResult) {
        try {
            log.info("üîç Request to validate reset password for user: {}", resetPasswordDTO.getUsername());

            // Validate input
            if (bindingResult.hasErrors()) {
                String errorMessage = bindingResult.getFieldErrors().stream()
                    .map(error -> error.getField() + ": " + error.getDefaultMessage())
                    .findFirst()
                    .orElse("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
                
                log.warn("‚ùå Validation errors: {}", errorMessage);
                return createErrorResponse(errorMessage, 400);
            }

            // Validate th√¥ng tin
            boolean isValid = resetPasswordService.validateResetPassword(resetPasswordDTO);

            if (isValid) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", true);
                response.put("message", "Th√¥ng tin h·ª£p l·ªá");
                response.put("username", resetPasswordDTO.getUsername());

                log.info("‚úÖ Reset password validation successful for user: {}", resetPasswordDTO.getUsername());
                return ResponseEntity.ok(response);
            } else {
                log.warn("‚ùå Reset password validation failed for user: {}", resetPasswordDTO.getUsername());
                return createErrorResponse("Th√¥ng tin kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i", 400);
            }

        } catch (Exception e) {
            log.error("‚ùå Error validating reset password for user {}: {}", 
                resetPasswordDTO.getUsername(), e.getMessage());
            return createErrorResponse("L·ªói h·ªá th·ªëng: " + e.getMessage(), 500);
        }
    }

    /**
     * Ki·ªÉm tra account t·ªìn t·∫°i theo phone number
     */
    @GetMapping("/check-account")
    public ResponseEntity<?> checkAccountExists(@RequestParam String phoneNumber) {
        try {
            log.info("üîç Checking if account exists for phone: {}", phoneNumber);

            // T√¨m account trong database
            Optional<Account> accountOpt = accountRepository.findByPhone(phoneNumber);
            
            if (accountOpt.isPresent()) {
                Account account = accountOpt.get();
                Map<String, Object> response = new HashMap<>();
                response.put("success", true);
                response.put("message", "Account found");
                response.put("accountId", account.getAccountId());
                response.put("name", account.getName());
                response.put("phone", account.getPhone());
                response.put("role", account.getRole());
                response.put("status", account.getStatus());
                response.put("hasProfile", account.getProfile() != null);
                
                log.info("‚úÖ Account found: ID={}, Name={}, Phone={}", 
                    account.getAccountId(), account.getName(), account.getPhone());
                return ResponseEntity.ok(response);
            } else {
                log.warn("‚ùå No account found for phone: {}", phoneNumber);
                return createErrorResponse("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi s·ªë ƒëi·ªán tho·∫°i n√†y", 404);
            }

        } catch (Exception e) {
            log.error("‚ùå Error checking account for phone {}: {}", phoneNumber, e.getMessage());
            return createErrorResponse("L·ªói h·ªá th·ªëng: " + e.getMessage(), 500);
        }
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i service
     */
    @GetMapping("/status")
    public ResponseEntity<?> getServiceStatus() {
        try {
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Reset Password Service is running");
            response.put("timestamp", System.currentTimeMillis());
            response.put("endpoints", new String[]{
                            "POST /api/reset-password/validate-info",
            "POST /api/reset-password/verify-otp", 
            "POST /api/reset-password/reset",
            "POST /api/reset-password/validate",
            "GET /api/reset-password/status",
            "GET /api/reset-password/check-account"
            });

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå Error getting service status: {}", e.getMessage());
            return createErrorResponse("L·ªói h·ªá th·ªëng", 500);
        }
    }

    /**
     * T·∫°o error response
     */
    private ResponseEntity<Map<String, Object>> createErrorResponse(String message, int status) {
        Map<String, Object> errorResponse = new HashMap<>();
        errorResponse.put("success", false);
        errorResponse.put("message", message);
        errorResponse.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.status(status).body(errorResponse);
    }
}
